package main

import (
	"fmt"
	"time"
)

func iteration(nums []int, key, lowestIndex, highestIndex int) int {
	valAtLow := nums[lowestIndex]
	valAtHigh := nums[highestIndex]
	aim := lowestIndex + ((key - valAtLow) * (highestIndex - lowestIndex) / (valAtHigh - valAtLow))
	if nums[aim] == key {
		return aim
	} else if nums[aim] > key {
		return iteration(nums, key, lowestIndex, aim-1)
	} else if aim < key {
		return iteration(nums, key, aim+1, highestIndex-1)
	}
	return aim
}

func InterpolationSearch(nums []int, key int) int {

	lowestIndex := 0
	highestIndex := len(nums) - 1

	pos := iteration(nums, key, lowestIndex, highestIndex)

	return pos
}

func main() {

	start := time.Now()

	nums := []int{1, 113, 245, 369, 415, 438, 488, 533, 654, 779, 858, 974, 1081, 1215, 1228, 1307, 1403, 1533, 1615, 1646, 1766, 1857, 1970, 2093, 2225, 2317, 2449, 2502, 2637, 2777, 2803, 2916, 2948, 2964, 3098, 3179, 3261, 3357, 3367, 3418, 3436, 3451, 3490, 3558, 3576, 3708, 3791, 3800, 3944, 4002, 4104, 4130, 4224, 4348, 4473, 4503, 4636, 4679, 4787, 4847, 4983, 5058, 5148, 5289, 5320, 5413, 5439, 5466, 5574, 5665, 5713, 5774, 5801, 5864, 5956, 6035, 6117, 6185, 6266, 6311, 6379, 6497, 6579, 6657, 6723, 6787, 6845, 6933, 7009, 7096, 7219, 7360, 7371, 7423, 7508, 7636, 7773, 7861, 7991, 8054, 8184, 8220, 8300, 8322, 8374, 8389, 8464, 8554, 8629, 8646, 8669, 8807, 8923, 8950, 9079, 9201, 9233, 9275, 9371, 9470, 9561, 9628, 9714, 9858, 9889, 9984, 10002, 10053, 10177, 10263, 10320, 10420, 10550, 10665, 10717, 10791, 10804, 10947, 10976, 11104, 11133, 11145, 11202, 11339, 11400, 11444, 11549, 11680, 11696, 11837, 11902, 12038, 12167, 12296, 12366, 12374, 12480, 12555, 12562, 12665, 12757, 12853, 12936, 12955, 12982, 13070, 13117, 13130, 13198, 13311, 13422, 13437, 13517, 13522, 13651, 13658, 13720, 13740, 13816, 13840, 13955, 14013, 14038, 14162, 14227, 14295, 14330, 14339, 14411, 14486, 14576, 14583, 14717, 14822, 14955, 15096, 15196, 15227, 15252, 15273, 15387, 15504, 15520, 15642, 15773, 15878, 15962, 16009, 16061, 16078, 16211, 16247, 16255, 16348, 16371, 16472, 16496, 16608, 16690, 16827, 16867, 16933, 17071, 17151, 17173, 17211, 17346, 17367, 17378, 17415, 17500, 17565, 17672, 17806, 17892, 18017, 18122, 18146, 18245, 18354, 18359, 18435, 18501, 18543, 18564, 18669, 18733, 18775, 18853, 18959, 19088, 19178, 19292, 19432, 19516, 19575, 19680, 19807, 19892, 19897, 19966, 20104, 20244, 20272, 20358, 20493, 20512, 20606, 20621, 20662, 20705, 20762, 20791, 20851, 20930, 21012, 21061, 21159, 21250, 21383, 21440, 21525, 21532, 21668, 21790, 21926, 21976, 22003, 22047, 22144, 22178, 22294, 22320, 22380, 22476, 22564, 22682, 22733, 22857, 22949, 23042, 23075, 23168, 23186, 23265, 23294, 23374, 23393, 23424, 23566, 23597, 23709, 23848, 23891, 23995, 24086, 24114, 24223, 24235, 24317, 24416, 24500, 24596, 24707, 24835, 24968, 25009, 25080, 25222, 25259, 25320, 25436, 25466, 25573, 25707, 25810, 25842, 25857, 25951, 25984, 26048, 26074, 26081, 26124, 26154, 26230, 26348, 26473, 26518, 26624, 26714, 26735, 26809, 26860, 26961, 26981, 27046, 27105, 27227, 27279, 27382, 27462, 27500, 27545, 27558, 27694, 27824, 27967, 28016, 28083, 28111, 28138, 28156, 28293, 28411, 28534, 28546, 28587, 28640, 28758, 28794, 28913, 28944, 28949, 29065, 29122, 29164, 29171, 29310, 29358, 29453, 29524, 29616, 29743, 29792, 29818, 29836, 29899, 29960, 29970, 30077, 30127, 30226, 30337, 30441, 30550, 30655, 30664, 30708, 30720, 30849, 30871, 30989, 31088, 31228, 31353, 31427, 31466, 31516, 31540, 31566, 31582, 31638, 31648, 31782, 31830, 31890, 31947, 32084, 32144, 32186, 32233, 32351, 32473, 32497, 32629, 32714, 32724, 32735, 32774, 32863, 32951, 33010, 33117, 33135, 33154, 33289, 33364, 33404, 33423, 33431, 33566, 33580, 33702, 33832, 33868, 33921, 33964, 34103, 34227, 34266, 34372, 34444, 34455, 34490, 34556, 34688, 34774, 34888, 34981, 35006, 35125, 35191, 35216, 35294, 35335, 35426, 35446, 35561, 35618, 35736, 35815, 35939, 35969, 36060, 36086, 36115, 36183, 36264, 36336, 36409, 36417, 36467, 36498, 36642, 36767, 36846, 36961, 36982, 37007}
	key := 36982

	fmt.Println(InterpolationSearch(nums, key))

	fmt.Printf("search took %s", time.Since(start))

	// min := 5
	// max := 145

	// nums := make([]int, 500)

	// for i := 0; i < 500; i++ {
	// 	dist := rand.Intn(max-min) + min

	// 	if i == 0 {
	// 		nums[i] = 1
	// 		continue
	// 	}
	// 	nums[i] = nums[i-1] + dist
	// }

	// fmt.Println(nums)
}
